generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id                 Int                  @id @default(autoincrement())
  nombre             String?
  apellidos          String?
  email              String?              @unique
  password           String?
  departamentos_id   Int?
  departamentos      departamentos?       @relation(fields: [departamentos_id], references: [id], onDelete: SetNull)
  role_id            Int?
  role               roles?               @relation(fields: [role_id], references: [id], onDelete: SetNull)
  activo             Int?
  documentos         documentos[]
  favoritos          favoritos[]
  bitacora           bitacora[]
}

model documentos {
  id                   Int               @id @default(autoincrement())
  nombre               String?
  descripcion          String?
  mime                 String?
  ruta                 String?
  file_key             String?
  size                 Int?
  checksum             String?
  tipos_documentos_id  Int?
  usuarios_id          Int?
  fecha_creacion       DateTime?
  fecha_subida         DateTime?
  departamentos_id     Int?
  nivel_acceso         NivelAcceso?
  codigo_clasificacion String?
  numero_expediente    String?
  serie                String?
  subserie             String?
  valor_documental     ValorDocumental?
  plazo_conservacion   String?
  periodos_id          Int?
  destino_final        String?
  soporte              Soporte?
  procedencia          String?
  folio                String?
  tipo_documento_text  String?
  estado_vigencia      String?
  tipos_documentos     tipos_documentos? @relation(fields: [tipos_documentos_id], references: [id], onDelete: SetNull)
  usuarios             usuarios?         @relation(fields: [usuarios_id], references: [id], onDelete: SetNull)
  departamentos        departamentos?     @relation(fields: [departamentos_id], references: [id], onDelete: SetNull)
  periodos             periodos?          @relation(fields: [periodos_id], references: [id], onDelete: SetNull)
  favoritos            favoritos[]

  @@index([tipos_documentos_id], map: "tipos_documentos_id")
  @@index([usuarios_id], map: "usuarios_id")
  @@index([departamentos_id], map: "documentos_departamentos_id_idx")
  @@index([periodos_id], map: "documentos_periodos_id_idx")
}

model favoritos {
  id           Int        @id @default(autoincrement())
  documento_id Int
  fecha        DateTime   @default(now())
  usuario_id   Int
  documento    documentos @relation(fields: [documento_id], references: [id], onDelete: Cascade)
  usuario      usuarios   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@unique([usuario_id, documento_id])
  @@index([documento_id], map: "favoritos_documento_id_fkey")
}

model departamentos {
  id          Int      @id @default(autoincrement())
  nombre      String?
  descripcion String?
  activo      Boolean?
  documentos  documentos[]
  usuarios    usuarios[]
  procesos    procesos[]
}

model periodos {
  id           Int       @id @default(autoincrement())
  periodo      String?
  fecha_inicio DateTime?
  fecha_final  DateTime?
  activo       Boolean?
  documentos   documentos[]
  procesos     procesos[]
}

model procesos {
  id               Int                 @id @default(autoincrement())
  estatus          procesos_estatus
  resultado        procesos_resultado?
  fecha_inicio     DateTime?
  fecha_fin        DateTime?
  departamentos_id Int?
  periodos_id      Int?
  departamentos     departamentos?      @relation(fields: [departamentos_id], references: [id], onDelete: SetNull)
  periodos          periodos?           @relation(fields: [periodos_id], references: [id], onDelete: SetNull)
}

model roles {
  id                 Int                  @id @default(autoincrement())
  tipo               roles_tipo
  descripcion        String?
  activo             Boolean?
  fecha_creacion     DateTime?
  usuarios           usuarios[]
}

model tipos_documentos {
  id         Int          @id @default(autoincrement())
  tipo       String?
  documentos documentos[]
}

// Nota: la tabla pivote `usuarios_has_roles` se elimin√≥ porque ahora cada usuario tiene un solo rol (`usuarios.role_id`).

model bitacora {
  id           Int       @id @default(autoincrement())
  usuario_id   Int?
  rol          String?
  accion       String?
  ip           String?
  descripcion  String?
  fecha_inicio DateTime?
  fecha_act    DateTime?
  usuario      usuarios? @relation(fields: [usuario_id], references: [id], onDelete: SetNull)
}

enum procesos_estatus {
  en_proceso
  terminado
}

enum procesos_resultado {
  aprobado
  rechazado
  en_revision
}

enum roles_tipo {
  admin
  capturista
  revisor
}

enum NivelAcceso {
  PUBLIC
  CONFIDENTIAL
  RESTRICTED
}

enum ValorDocumental {
  TEMPORAL
  PERMANENT
}

enum Soporte {
  DIGITAL
  FISICO
  HIBRIDO
}

